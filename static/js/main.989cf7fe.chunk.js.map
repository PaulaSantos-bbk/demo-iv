{"version":3,"sources":["pages/HomePage/index.jsx","components/NavBar/index.jsx","components/Card/index.jsx","pages/GamePage/index.jsx","pages/SettingsPage/index.jsx","constants/index.js","utilities/index.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","NavBar","to","exact","Card","flipped","onClick","matched","number","symbol","className","data-number","GamePage","deck","onReset","map","card","i","key","SettingsPage","symbols","createDeck","allCards","concat","App","createNewDeck","arr","j","inPlace","base","length","Math","floor","random","shuffle","useState","setDeck","path","component","e","clickedCard","target","dataset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUAIeA,EAFE,kBAAM,oD,eCoBRC,G,MAlBA,kBACb,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASC,GAAG,IAAIC,OAAK,GAArB,SAIF,4BACE,kBAAC,IAAD,CAASD,GAAG,SAAZ,SAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,aAAZ,iBCPOE,G,MANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAkBC,GAArB,EAAYC,QAAZ,EAAqBD,SAASE,EAA9B,EAA8BA,OAAQC,EAAtC,EAAsCA,OAAtC,OACX,yBAAKC,UAAU,OAAOJ,QAASA,EAASK,cAAaH,GAClDH,EAAUI,EAAS,OCYTG,EAZE,SAAC,GAAD,QAAGC,YAAH,MAAU,GAAV,EAAcP,EAAd,EAAcA,QAASQ,EAAvB,EAAuBA,QAAvB,OACf,yBAAKJ,UAAU,QACZG,EAAKE,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,EAAD,eAAMC,IAAKD,EAAGT,OAAQS,GAAOD,EAA7B,CAAmCV,QAASA,QAG9C,4BAAQI,UAAU,SAASJ,QAASQ,GAApC,aCPWK,EAFM,kBAAM,yDCFdC,EAAU,CACrB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBCnBWC,EAAa,SAACD,GAAD,OACxBA,EAAQL,KAAI,SAACN,GAAD,MAAa,CAAEA,SAAQJ,SAAS,EAAOE,SAAS,OCQxDe,EAAWF,EAAQG,OAAOH,GA2BjBI,MAzBf,WACE,IAAMC,EAAgB,kBAAMJ,EDRP,SAACK,GAGtB,IAH+C,IAGtBC,EAHEC,IAAmB,yDAExCC,EAAOD,EAAUF,EAAM,GAAGH,OAAOG,GAC9BT,EAAIS,EAAII,OAAWb,GAAK,OAEV,CAACY,EADtBF,EAAII,KAAKC,MAAMD,KAAKE,SAAWhB,IACAY,IAAOZ,IAArCY,EAAKZ,GAFyB,KAErBY,EAAKF,GAFgB,KAIjC,OAAOE,ECCgCK,CAAQZ,KADlC,EAEWa,mBAASd,EAAWD,EAAQG,OAAOH,KAF9C,mBAENP,EAFM,KAEAuB,EAFA,KAcb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIlC,OAAK,EAACmC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,QAAQlC,OAAK,GACvB,kBAAC,EAAD,CAAUU,KAAMA,EAAMP,QAdZ,SAACiC,GACf,IAAMC,GAAeD,EAAEE,OAAOC,QAAQlC,OACtC4B,EACEvB,EAAKE,KAAI,SAACC,EAAMC,GAAP,OACPA,IAAMuB,EAAcxB,EAApB,2BAAgCA,GAAhC,IAAsCX,SAAUW,EAAKX,eAUbS,QAf9B,kBAAMsB,EAAQX,SAiB1B,kBAAC,IAAD,CAAOY,KAAK,YAAYC,UAAWnB,MCnBrBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.989cf7fe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst HomePage = () => <div>I am the homepage!</div>;\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <NavLink to=\"/\" exact>\r\n          Home\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/game\">Game</NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/settings\">Settings</NavLink>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ flipped, matched, onClick, number, symbol }) => (\r\n  <div className=\"card\" onClick={onClick} data-number={number}>\r\n    {flipped ? symbol : \"X\"}\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./GamePage.css\";\r\nimport { Card } from \"../../components\";\r\n\r\n//extracting from props deck\r\nconst GamePage = ({ deck = [], onClick, onReset }) => (\r\n  <div className=\"deck\">\r\n    {deck.map((card, i) => (\r\n      <Card key={i} number={i} {...card} onClick={onClick} />\r\n    ))}\r\n\r\n    <button className=\"button\" onClick={onReset}>\r\n      Restart\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default GamePage;\r\n","import React from \"react\";\r\n\r\nconst SettingsPage = () => <div>I am the settings page!</div>;\r\n\r\nexport default SettingsPage;\r\n","export const symbols = [\r\n  \"🐨\",\r\n  \"🐻\",\r\n  \"🐶\",\r\n  \"🐗\",\r\n  \"🐭\",\r\n  \"🐔\",\r\n  \"🐸\",\r\n  \"🐱\",\r\n  \"🦁\",\r\n  \"🐯\",\r\n  \"🦊\",\r\n  \"🐺\",\r\n  \"🐵\",\r\n  \"🙈\",\r\n  \"🙉\",\r\n  \"🙊\",\r\n  \"🐷\",\r\n  \"🐹\",\r\n  \"🐰\",\r\n];\r\n","export const createDeck = (symbols) =>\r\n  symbols.map((symbol) => ({ symbol, flipped: false, matched: false }));\r\n\r\n//suffle and array\r\nexport const shuffle = (arr, inPlace = true) => {\r\n  // shallow copy if not inPlace, modifying the input array otherwise\r\n  const base = inPlace ? arr : [].concat(arr);\r\n  for (let i = arr.length, j; i; ) {\r\n    j = Math.floor(Math.random() * i);\r\n    [base[i], base[j]] = [base[j], base[--i]];\r\n  }\r\n  return base;\r\n};\r\n","import React, { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { HomePage, GamePage, SettingsPage } from \"./pages\";\nimport { symbols } from \"./constants\";\nimport { createDeck, shuffle } from \"./utilities\";\n\n//react fragments to wrap content <></> eg the <div>\nconst allCards = symbols.concat(symbols);\n\nfunction App() {\n  const createNewDeck = () => createDeck(shuffle(allCards));\n  const [deck, setDeck] = useState(createDeck(symbols.concat(symbols)));\n  const onReset = () => setDeck(createNewDeck());\n  const onClick = (e) => {\n    const clickedCard = +e.target.dataset.number;\n    setDeck(\n      deck.map((card, i) =>\n        i !== clickedCard ? card : { ...card, flipped: !card.flipped }\n      )\n    );\n  };\n\n  //game is passed as a child of route\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={HomePage} />\n      <Route path=\"/game\" exact>\n        <GamePage deck={deck} onClick={onClick} onReset={onReset} />\n      </Route>\n      <Route path=\"/settings\" component={SettingsPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { NavBar } from \"./components\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <NavBar />\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}